//
//  main.cpp
//  card
//
//  Created by bugme on 1/21/16.
//  Copyright Â© 2016 bugme. All rights reserved.
//

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <list>

using namespace std;

int g_round = 0;
int g_win = 0;

int getvalue(string& str)
{
    int value = 0;
    
    char c = str[0];
    if (isalpha(c)) {
        switch (c) {
            case 'J':
                value = 100;
                break;
            case 'Q':
                value = 101;
                break;
            case 'K':
                value = 102;
                break;
            case 'A':
                value = 103;
                break;
        }
    } else {
        value = atoi(str.c_str());
    }
    
    return value;
}

int checkbattle(std::string& a, std::string& b)
{
    int va = getvalue(a);
    int vb = getvalue(b);
    if (va > vb)
        return 1;
    else if (va == vb)
        return 0;
    return -1;
}

void checkcards(std::list<std::string>& cardsa, std::list<std::string>& cardsb)
{
    std::list<std::string> penda;
    std::list<std::string> pendb;
    bool gameequal = false;
    bool inwar = false;
    
    while (true) {
        if (cardsa.size() == 0 || cardsb.size() == 0) {
            cerr << "game end a.size=" << cardsa.size() << " b.size=" << cardsb.size() << endl;
            if (inwar) {
                gameequal = true;
            }
            break;
        }
        if (gameequal)
            break;
        
        std::string a = cardsa.front();
        cardsa.pop_front();
        std::string b = cardsb.front();
        cardsb.pop_front();
        
        int ret = checkbattle(a, b);
        cerr << a << " " << b << " " << ret << endl;
        if (ret == 1) {
            g_round++;
            inwar = false;
            if (penda.size() > 0) {
                cardsa.insert(cardsa.end(), penda.begin(), penda.end());
                penda.clear();
            }
            cardsa.push_back(a);
            if (pendb.size() > 0) {
                cardsa.insert(cardsa.end(), pendb.begin(), pendb.end());
                pendb.clear();
            }
            cardsa.push_back(b);
        } else if (ret == -1) {
            inwar = false;
            g_round++;
            if (penda.size() > 0) {
                cardsb.insert(cardsb.end(), penda.begin(), penda.end());
                penda.clear();
            }
            cardsb.push_back(a);
            if (pendb.size() > 0) {
                cardsb.insert(cardsb.end(), pendb.begin(), pendb.end());
                pendb.clear();
            }
            cardsb.push_back(b);
        } else {
            inwar = true;
            penda.push_back(a);
            pendb.push_back(b);
            
            for (int i = 0; i < 3; ++i) {
                if (cardsa.size() == 0 || cardsb.size() == 0) {
                    gameequal = true;
                    break;
                }
                
                std::string ca = cardsa.front();
                cardsa.pop_front();
                penda.push_back(ca);
                
                std::string cb = cardsb.front();
                cardsb.pop_front();
                pendb.push_back(cb);
                cerr << "push " << ca << " " << cb << endl;
            }
        }
    }
    if (gameequal) {
        cout << "PAT" << endl;
    } else {
        g_win = cardsa.size() > 0 ? 1 : 2;
        cout << g_win << " " << g_round << endl;
    }
}

int main(int argc, const char * argv[]) {
    
    int n; // the number of cards for player 1
    cin >> n; cin.ignore();
    std::list<std::string> cardsa;
    
    cerr << "playera:";
    for (int i = 0; i < n; i++) {
        string cardp1; // the n cards of player 1
        cin >> cardp1; cin.ignore();
        cardsa.push_back(cardp1);
        cerr << cardp1 << " ";
    }
    cerr << endl;
    
    int m; // the number of cards for player 2
    cin >> m; cin.ignore();
    std::list<std::string> cardsb;
    
    cerr << "playerb:";
    for (int i = 0; i < m; i++) {
        string cardp2; // the m cards of player 2
        cin >> cardp2; cin.ignore();
        cardsb.push_back(cardp2);
        cerr << cardp2 << " ";
    }
    cerr << endl;
    
    checkcards(cardsa, cardsb);
    return 0;
}
